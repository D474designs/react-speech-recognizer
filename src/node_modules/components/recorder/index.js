import React, { Component } from 'react'
import shallowequal from 'shallowequal'

const errorCallback = (error) => {
  console.log("error", error)
}

const createRecorder = (lang, interimResults) => {
  window.AudioContext = window.AudioContext ||
                      window.webkitAudioContext;

  const context = new AudioContext()
  console.log("context", context)

  navigator.getUserMedia({audio: true}, (stream) => {
    console.log("stream", stream)
    /*
    const microphone = context.createMediaStreamSource(stream)
    const filter = context.createBiquadFilter()

    // microphone -> filter -> destination.
    microphone.connect(filter)
    filter.connect(context.destination)
    console.log("hourra")*/
  }, errorCallback);
}

/*
const attachEvents = (recognition, {onEnd = ()=>{}, onError = ()=>{}, onStart = ()=>{}, onResult = ()=>{}}) => {
  recognition.onstart = onStart
  recognition.onend = onEnd
  recognition.onerror = onError
  recognition.onend = onEnd
  recognition.onresult = onResult
  return recognition
}*/

class Recorder extends Component {
  componentDidMount() {
    this.initRecorder(this.props)
  }
  componentWillReceiveProps(nextProps) {
    if(!shallowequal(nextProps, this.props)) {
      this.initRecorder(nextProps)
    }
  }
  componentWillUnmount() {
    this.abortRecorder()
  }
  abortRecorder() {

  }
  initRecorder(props) {

    // Abort previous instances of recognition already running
    this.abortRecorder()

    // Create new recorder
    const recorder = createRecorder()
  }

  render() {
    return null
  }
}

export default Recorder
