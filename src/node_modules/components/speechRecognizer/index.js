import React, { Component } from 'react'

class SpeechRecognizer extends Component {
  constructor(props) {
    super(props)
    this.recognition = null
  }
  componentDidMount() {
    this.initRecognition(this.props)
  }
  componentWillReceiveProps(nextProps) {
    this.initRecognition(nextProps)
  }
  componentWillUnmount() {
    this.recognition.abort()
  }
  initRecognition(props) {
    const { lang='en-GB', onStart, onTempResult, onResult, onError, onEnd, onNotAvailable } = this.props

    if (!('webkitSpeechRecognition' in window)) {
      console.log("webkit speech recognition not available")
      return onNotAvailable()
    }

    this.recognition = new window.webkitSpeechRecognition()
    this.recognition.lang = lang
    //this.recognition.continuous = false
    if(onTempResult) this.recognition.interimResults = true
    if(onStart) this.recognition.onstart = onStart
    if(onError) this.recognition.onerror = onError
    if(onError) this.recognition.onend = onEnd

    if(onResult) this.recognition.onresult = (e) => {
      console.log("results", e.results, e)
      const transcript = e && e.results && e.results[0] && e.results[0][0]
        ?  e.results[0][0].transcript
        : null
      const isFinal = e && e.results && e.results[0]
        ? e.results[0].isFinal
        : null

      onResult(transcript, isFinal)

      if(isFinal) {
        this.recognition.abort()
        this.recognition.start()
      }
    }

    this.recognition.start()
  }

  render() {
    return null
  }
}

export default SpeechRecognizer
