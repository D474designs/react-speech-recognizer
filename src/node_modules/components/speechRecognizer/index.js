import React, { Component } from 'react'

const defaultEvent = (event, ...rest) => {
  console.log("params", event, rest)
}

class SpeechRecognizer extends Component {
  constructor(props) {
    super(props)
    this.recognition = null
  }
  componentDidMount() {
    this.initRecognition(this.props)
  }
  componentWillReceiveProps(nextProps) {
    this.initRecognition(nextProps)
  }
  initRecognition(props) {
    const { lang='en-GB', onStart = defaultEvent, onResult = defaultEvent, onError = defaultEvent, onEnd = defaultEvent, onNotAvailable = defaultEvent } = this.props

    if (!('webkitSpeechRecognition' in window)) {
      console.log("webkit speech recognition not available")
      return onNotAvailable()
    }

    this.recognition = new window.webkitSpeechRecognition()
    //this.recognition.continuous = false
    this.recognition.interimResults = true

    this.recognition.onstart = onStart
    this.recognition.onresult = (e) => {
      console.log("results", e.results)
      const transcript = e && e.results && e.results[0] && e.results[0][0]
        ?  e.results[0][0].transcript
        : null
      const isFinal = e && e.results && e.results[0]
        ? e.results[0].isFinal
        : null

      onResult(transcript, isFinal)

      if(isFinal) {
        this.recognition.stop()
        this.recognition.start()
      }
    }
    this.recognition.onerror = onError
    this.recognition.onend = onEnd

    this.recognition.lang = lang

    this.recognition.start()
  }

  render() {
    return null
  }
}

export default SpeechRecognizer
